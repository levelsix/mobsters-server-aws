<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:int="http://www.springframework.org/schema/integration"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/integration
		http://www.springframework.org/schema/integration/spring-integration-4.0.xsd
		http://www.springframework.org/schema/websocket
		http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd">

	<context:annotation-config/>
	<context:component-scan base-package="com.lvl6.eventhandlers"/>

	<websocket:message-broker order="1" 
		application-destination-prefix="/app/" user-destination-prefix="/user/">
		
		<websocket:transport message-size="16896"
			send-buffer-size="1048588" send-timeout="20000"/>
		
		<websocket:stomp-endpoint path="/gameevents">
			<!-- Consume authentication metadata from HTTPRequest here. Be sure to 
				identify and extract a Principal object. When Spring's WebSocket client module 
				receives a Message on the channel it uses for writing content back to its 
				connected client end points, it first has to identify which Session to write. 
				This is keyed off a standard STOMP header used to identify the Principal 
				each session is associated it. Note, there is a special Principal class that 
				distinguishes between actual username and an a mangled-extension-based variation 
				on that name used for socket lookup in applications that support multiple 
				concurrent logins by the same Principal, but we won't want to use that. This 
				also seems like a good place to emit one or two application events to begin 
				ensuring the user's state is loaded, up-to-date, and authority to edit is 
				secured. -->

			<websocket:handshake-handler ref="mobstersHandshakeHandler"/>
		</websocket:stomp-endpoint>

		<websocket:stomp-broker-relay
			virtual-host="devmobsters" relay-host="localhost" relay-port="61613"
			client-login="lvl6server" client-passcode="abc123" 
			system-login="lvl6server" system-passcode="abc123"
			heartbeat-receive-interval="45000" heartbeat-send-interval="45000" 
			auto-startup="true" prefix="/queue/, /topic/, /exchange/, /amq/queue/"/>

		<websocket:message-converters register-defaults="true">
			<bean name="binaryProtobufDecoder" lazy-init="false"
				class="com.lvl6.mobsters.websockets.BinaryProtobufConverter"
				autowire-candidate="false" scope="singleton" abstract="false"/>
		</websocket:message-converters>

		<websocket:client-inbound-channel>
			<!-- These are the automatic defaults for a 4-core machine, verbatim.  Drop or replace with bind variables later. -->
			<websocket:executor core-pool-size="8" max-pool-size="2147483647" queue-capacity="2147483647" keep-alive-seconds="60"/>
		</websocket:client-inbound-channel>

		<websocket:client-outbound-channel>
			<!-- These are the automatic defaults for a 4-core machine, verbatim.  Drop or replace with bind variables later. -->
			<websocket:executor core-pool-size="8" max-pool-size="2147483647" queue-capacity="2147483647" keep-alive-seconds="60"/>
		</websocket:client-outbound-channel>

		<websocket:broker-channel>
			<!-- These are the automatic defaults for a 4-core machine, verbatim. 
				Drop or replace with bind variables later. -->
			<websocket:executor core-pool-size="1"
				max-pool-size="1" queue-capacity="2147483647" keep-alive-seconds="60"/>
		</websocket:broker-channel>
	</websocket:message-broker>


	<!-- WebSocketContainer configuration factory and protocol resource properties -->
	<bean
		class="org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean"
		name="wsServletContainerFactory" lazy-init="false" autowire-candidate="true"
		scope="singleton" abstract="false">
		<!-- For STOMP: 16K + 512 wiggle room -->
		<property name="maxTextMessageBufferSize" value="16896" />

		<property name="asyncSendTimeout" value="20000" />
		<property name="maxSessionIdleTimeout" value="180000" />
	</bean>


	<!-- Early customization of a default built-in bean at the point in session 
		handshake where Spring and/or consumer logic is permitted to interpret and/or 
		interact with the on-connect handshake that yields and locks in session attributes 
		once over. Of particular importance here is to make sure a valid Principal 
		object is provided with the associated user's UDID or UUID.  Routing messages back
		to just that user relies on matching the Principal in the session by name with a
		value in the message headers. -->
	<bean name="mobstersHandshakeHandler" abstract="false"
		class="com.lvl6.mobsters.websockets.MobstersHandshakeHandler"
		lazy-init="false" scope="singleton" autowire-candidate="false"/>
	
	<!-- The built-in UserDestinationResolver builds queue names based on the WebSocketSession.getId()
	     return value.  In the case of Tomcat, this is the smallest unused integer greater than or
	     equal to 0.  It's not unique if there are mulitple instances of the websocket application, and
	     its not a match to what the legacy game client expects to bind.
	     
	     Although this interface is not in the officially overridable component set, the documentation
	     indicates that would not be difficult to provide more sophisticated algorithms for creating 
	     disambiguating and user-specific variants on /user/* destination names.  The undocumented trick
	     is knowing how to name the replacement bean.
		 
		 This override is a minimal replacement, differing only in its choice to disambiguate the queue
		 names with a username suffix rather than a session id.  Its likely Spring did not proceed this
		 way initially because their demo applications show users having multiple concurrent logins,
		 hence this class had to be able to map any given Principal to the set of all the login sessions
		 it owned.
	-->
	<bean name="org.springframework.messaging.simp.user.DefaultUserDestinationResolver#0"
		  class="com.lvl6.mobsters.websockets.MobstersUserDestinationResolver" 
		  lazy-init="false" scope="singleton" autowire-candidate="false" abstract="false">
		  <constructor-arg index="0" ref="org.springframework.messaging.simp.user.DefaultUserSessionRegistry#0"/>
	</bean>

	<!-- TBD.  Not sure if this is needed or what yet. -->
	<!-- bean id="stompWebSocketSubProtoExtension" autowire-candidate="true" lazy-init="false"
		  class="org.springframework.web.socket.messaging.StompWebSocketExtension"></bean-->

<!--
	<int:filter input-channel="serviceChannel"
		 output-channel="idempotentServiceChannel"
	 	 discard-channel="discardChannel"
	 	 expression="@metadataStore.get(headers.businessKey) == null"/>
	<int:publish-subscribe-channel id="idempotentServiceChannel" />
	<int:outbound-channel-adapter channel="idempotentServiceChannel"
		 expression="@metadataStore.put(headers.businessKey, '')" />
	<int:service-activator input-channel="idempotentServiceChannel" ref="service" />
-->

	<!--
	<int:annotation-config />
	<int:channel id="channel1"></int:channel>
	<int:claim-check-in input-channel="channel1" output-channel="channel2"></int:claim-check-in>
	<int:resequencer input-channel="channel2" discard-channel="channel3" output-channel="channel3"></int:resequencer>
	<int:channel id="channel2">
		<int:interceptors>
			<int:wire-tap channel="channel4" />
		</int:interceptors>
	</int:channel>

	<int:header-value-router></int:header-value-router>
	<int:chain>
		<int:claim-check-in />
		<int:resequencer></int:resequencer>
	</int:chain>
	<int:router></int:router>
	<int:channel id="channel4"></int:channel>
	-->
</beans>