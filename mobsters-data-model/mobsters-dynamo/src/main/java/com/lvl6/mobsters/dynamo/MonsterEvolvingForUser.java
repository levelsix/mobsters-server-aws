package com.lvl6.mobsters.dynamo;
import java.util.Date;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBVersionAttribute;

@DynamoDBTable(tableName="MonsterEvolvingForUser")
public class MonsterEvolvingForUser {



//	private String id;
	private String userId;
	private String catalystMonsterForUserId;
	private Long version;

	
	private String monsterForUserIdOne;
	private String monsterForUserIdTwo;
	private Date startTime;
	public MonsterEvolvingForUser(){}
  public MonsterEvolvingForUser(String catalystMonsterForUserId,
			String monsterForUserIdOne, String monsterForUserIdTwo, String userId,
			Date startTime) {
		super();
		this.catalystMonsterForUserId = catalystMonsterForUserId;
		this.monsterForUserIdOne = monsterForUserIdOne;
		this.monsterForUserIdTwo = monsterForUserIdTwo;
		this.userId = userId;
		this.startTime = startTime;
	}


//	@DynamoDBHashKey(attributeName = "id")
//	@DynamoDBAutoGeneratedKey
//	public String getId(){return id;}
//	public void setId(String id){this.id = id;}

  	@DynamoDBHashKey(attributeName = "userId")
	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}
	
	@DynamoDBRangeKey(attributeName = "catalystMonsterForUserId")
	public String getCatalystMonsterForUserId() {		return catalystMonsterForUserId;
	}
	
	public void setCatalystMonsterForUserId(String catalystMonsterForUserId) {
		this.catalystMonsterForUserId = catalystMonsterForUserId;
	}

	@DynamoDBVersionAttribute
	public Long getVersion(){return version;}
	public void setVersion(Long version){this.version = version;}


	public String getMonsterForUserIdOne() {
		return monsterForUserIdOne;
	}

	public void setMonsterForUserIdOne(String monsterForUserIdOne) {
		this.monsterForUserIdOne = monsterForUserIdOne;
	}

	public String getMonsterForUserIdTwo() {
		return monsterForUserIdTwo;
	}

	public void setMonsterForUserIdTwo(String monsterForUserIdTwo) {
		this.monsterForUserIdTwo = monsterForUserIdTwo;
	}

	public Date getStartTime() {
		return startTime;
	}

	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}

	@Override
	public String toString() {
		return "MonsterEvolvingForUser [catalystMonsterForUserId="
				+ catalystMonsterForUserId + ", monsterForUserIdOne="
				+ monsterForUserIdOne + ", monsterForUserIdTwo=" + monsterForUserIdTwo
				+ ", userId=" + userId + ", startTime=" + startTime + "]";
	}
	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime
			* result
			+ ((catalystMonsterForUserId == null) ? 0 : catalystMonsterForUserId.hashCode());
		result = prime
			* result
			+ ((userId == null) ? 0 : userId.hashCode());
		return result;
	}
	@Override
	public boolean equals( Object obj )
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MonsterEvolvingForUser other = (MonsterEvolvingForUser) obj;
		if (catalystMonsterForUserId == null) {
			if (other.catalystMonsterForUserId != null)
				return false;
		} else if (!catalystMonsterForUserId.equals(other.catalystMonsterForUserId))
			return false;
		if (userId == null) {
			if (other.userId != null)
				return false;
		} else if (!userId.equals(other.userId))
			return false;
		return true;
	}
  
}
