package com.lvl6.mobsters.dynamo;

//import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBVersionAttribute;

@DynamoDBTable(tableName="AchievementForUser")
public class AchievementForUser {



	//private String id;
	private String userId;
	private Long version;

	

	private int achievementId;
	private int progress;
	private boolean isComplete;
	private boolean isRedeemed;	
	public AchievementForUser() {
		super();
	}

	public AchievementForUser(String userId, int achievementId, int progress,
			boolean isComplete, boolean isRedeemed) {
		super();
		this.userId = userId;
		this.achievementId = achievementId;
		this.progress = progress;
		this.isComplete = isComplete;
		this.isRedeemed = isRedeemed;
	}


	/*@DynamoDBHashKey(attributeName = "id")
	@DynamoDBAutoGeneratedKey
	public String getId(){return id;}
	public void setId(String id){this.id = id;}*/


	@DynamoDBVersionAttribute
	public Long getVersion(){return version;}
	public void setVersion(Long version){this.version = version;}

	@DynamoDBHashKey(attributeName = "id")
	public String getUserId() {		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	public int getAchievementId() {
		return achievementId;
	}

	public void setAchievementId(int achievementId) {
		this.achievementId = achievementId;
	}

	public int getProgress() {
		return progress;
	}

	public void setProgress(int progress) {
		this.progress = progress;
	}

	public boolean isComplete() {
		return isComplete;
	}

	public void setComplete(boolean isComplete) {
		this.isComplete = isComplete;
	}

	public boolean isRedeemed() {
		return isRedeemed;
	}

	public void setRedeemed(boolean isRedeemed) {
		this.isRedeemed = isRedeemed;
	}

	@Override
	public String toString() {
		return "AchievementForUser [userId=" + userId + ", achievementId="
				+ achievementId + ", progress=" + progress + ", isComplete="
				+ isComplete + ", isRedeemed=" + isRedeemed + "]";
	}

 	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((userId == null) ? 0 : userId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		AchievementForUser other = (AchievementForUser) obj;
		if (userId == null) {
			if (other.userId != null)
				return false;
		} else if (!userId.equals(other.userId))
			return false;
		return true;
	}

}